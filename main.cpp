/*
	Курсовая работа за 1 семестр. Задание 7т:
	Даны N точек на плоскости. Найти среди них точки, являющиеся вершинами фигуры, 
	содержащей максимальное число заданных точек.
	Фигура: сердце
	Автор: Савин Павел Алексеевич, группа 2309.
	Даты: Начало: 17.11.2022 Окончание 15.12.2022
*/

// поскольку все распихано по заголовочным файлам, в main нужно подключить только их
#include "ex_math.h"
#include "file.h"
#include "process.h"

int main() {
	// пробуем открыть три файла: входной с данными, лог-файл для записи всего происходящего и выходной для записи конечного ответа на задачу
	std::ifstream infile("in.txt");
	std::ofstream logfile("log.txt");
	std::ofstream outfile("out.txt");
	logfile << "Программа начала работу.\nПроизводится попытка открытия входного файла.\n";
	if (infile) { // если входной файл открылся, работаем дальше, иначе...
		logfile << "Запущено определение пар координат.\n";
		unsigned int pts_cnt = def_size(infile, logfile); // запускаем первый обход, ищем корректные точки
		if (pts_cnt < 4) { // сердце состоит из 4 явных вершин, меньшее число точек в наборе не имеет смысла
			if (!pts_cnt) logfile << "Корректных пар координат, образующих точки, не нашлось.\nПрограмма завершила работу.";
			else logfile << "Обнаруженных пар координат меньше минимального (4).\nПрограмма завершила работу.";
			outfile << "Недостаточно точек для построения хотя бы одного сердца. Ответ не получен.\nПодробности в лог-файле log.txt";
			return 0;
		}
		logfile << "Получено точек: " << pts_cnt << ".\nПроизводится второй обход входного файла и попытка записи входных данных в массив.\n";
		// в файле обнаружено достаточно точек, выделяем память под массив
		double** A = new double* [pts_cnt];
		for (int i = 0; i < pts_cnt; ++i) A[i] = new double[2];
		unsigned int arr_len = fill_arr(infile, logfile, A, pts_cnt); // запускаем второй обход и запись данных в массив
		if (arr_len < pts_cnt) { // могут быть дубли, по соглашению они отбрасываются, соответственно, набор данных может стать меньше положенного
			logfile << "При повторном обходе были обнаружены дубли.\n";
			if (arr_len < 4) {
				if (arr_len == 1) logfile << "Весь файл состоит из дублей одной точки, что недостаточно для минимального набора (4).\nПрограмма завершила работу.";
				else logfile << "Отбрасывание дублей привело к тому, что набор стал меньше необходимого (4).\nПрограмма завершила работу.";
				outfile << "При записи точек с входного файла были обнаружены дубли.\nИх отбрасывание привело к тому, что набор стал меньше необходимого хотя бы для одного сердца. Ответ не получен.\nПодробности в лог-файле log.txt";
				clear_arr(A, pts_cnt); // поскольку массив уже объявлен и в нем уже что-то разместилось, очищаем выделенную под него память
				return 0;
			}
		}
		process(A, arr_len, logfile, outfile); // запускаем обработку
		clear_arr(A, pts_cnt); // массив отработан, нужно освободить память
	}
	else { // ...иначе сообщаем, что все плохо, и закругляемся
		logfile << "Файл не найден.\n";
		outfile << "Ошибка чтения входного файла.\nПодробности в лог-файле log.txt";
	}
	logfile << "Программа завершила работу.";
	infile.close();
	outfile.close();
	logfile.close();
	return 0;
}